{"version":3,"sources":["Shareholders.js","App.js","rootReducer.js","combineReducers.js","serviceWorker.js","index.js"],"names":["Column","Table","Text","Typography","ShareholdersTable","shareholders","openForm","removeShareholders","dataSource","rowKey","title","dataIndex","key","render","text","Content","Layout","Header","Sider","asyncAction","dispatch","func","a","msg","type","rets","error","message","App","useContext","Store","state","AppReducer","reloadShareholders","usePolymathSdk","sdkError","sdk","networkId","walletAddress","useTokenSelector","tokenSelectorError","tokenSelector","tokens","tokenIndex","loading","loadingMessage","token","length","useEffect","getShareholders","undefined","fetchShareholders","records","map","address","balance","toString","handleImport","data","split","record","trim","filter","amount","BigNumber","mintTokens","mintingData","q","run","Promise","resolve","setTimeout","spinning","tip","size","style","backgroundColor","display","flexDirection","justifyContent","alignItems","width","padding","onTokenSelect","closable","showIcon","marginRight","marginBottom","onClick","csvContent","join","console","log","blob","Blob","FileSaver","saveAs","onChange","info","file","status","fileList","success","name","url","callback","reader","FileReader","addEventListener","result","readAsText","getData","originFileObj","accept","showUploadList","action","headers","authorization","rootReducer","reducers","hasChanged","nextState","Object","keys","reduce","combineReducers","Boolean","window","location","hostname","match","initialState","createContext","_split","string","ReactDOM","store","useReducer","Provider","value","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ecbdb2b.chunk.js","sourcesContent":["import React from 'react'\nimport { Table, Typography } from 'antd'\nconst { Column } = Table\nconst { Text } = Typography\n\nexport default function ShareholdersTable({shareholders, openForm, removeShareholders}) {\n  return (\n    <Table dataSource={shareholders} rowKey=\"address\">\n      <Column\n        title='Address'\n        dataIndex='address'\n        key='address'\n        render={(text) => <Text>{text}</Text>}\n      />\n      <Column\n        title='Balance'\n        dataIndex='balance'\n        key='balance'\n        render={(text) => text}\n      />\n    </Table>\n  )\n}\n","import React, { useContext, useEffect, Fragment } from 'react'\nimport { usePolymathSdk, useTokenSelector, User, Network} from '@polymathnetwork/react'\nimport { BigNumber } from '@polymathnetwork/sdk'\nimport FileSaver from 'file-saver'\n\nimport { Store } from './index'\nimport { Layout, Spin, Alert, Button, Upload, Icon, message } from 'antd'\nimport ShareholdersTable from './Shareholders'\n\nconst { Content, Header, Sider } = Layout\n\nexport const reducer = (state, action) => {\n  console.log('ACTION', action)\n  switch (action.type) {\n  case 'ASYNC_START':\n    return {\n      ...state,\n      loading: true,\n      loadingMessage: action.msg,\n      error: undefined,\n    }\n  case 'ASYNC_COMPLETE':\n    const { type, ...payload } = action\n    return {\n      ...state,\n      ...payload,\n      loading: false,\n      loadingMessage: '',\n      error: undefined\n    }\n  case 'ERROR':\n  case 'ASYNC_ERROR':\n    const { error } = action\n    return {\n      ...state,\n      loading: false,\n      loadingMessage: '',\n      error,\n    }\n  case 'RELOAD_SHAREHOLDERS':\n    const { tokenIndex } = action\n    return {\n      ...state,\n      tokenIndex,\n      records: undefined,\n      error: undefined,\n      shareholders: [],\n      reloadShareholders: true,\n    }\n  default:\n    console.error(`Unrecognized action type: ${action.type}`)\n  }\n  return state\n}\n\nasync function asyncAction(dispatch, func, msg = '') {\n  try {\n    dispatch({type: 'ASYNC_START', msg})\n    const rets = await func()\n    dispatch({type: 'ASYNC_COMPLETE', ...rets})\n  }\n  catch (error) {\n    dispatch({type: 'ASYNC_ERROR', error: error.message})\n  }\n}\n\nfunction App() {\n  const [state, dispatch] = useContext(Store)\n  const { reloadShareholders, shareholders } = state.AppReducer\n  let {error: sdkError, sdk, networkId, walletAddress} = usePolymathSdk()\n  let {error: tokenSelectorError, tokenSelector, tokens, tokenIndex} = useTokenSelector(sdk, walletAddress)\n\n  let {\n    loading,\n    loadingMessage,\n    error\n  } = state.AppReducer\n  const token = tokens[tokenIndex]\n\n  error = error || sdkError || tokenSelectorError\n  if (!error && !loadingMessage) {\n    if (!sdk) {\n      loading = true\n      loadingMessage = 'Initializing Polymath SDK'\n    }\n    else if (!tokens.length) {\n      loading = true\n      loadingMessage = 'Loading your security tokens'\n    }\n  }\n\n  // Fetch shareholders + balances.\n  useEffect(() => {\n    async function fetchShareholders() {\n      let shareholders = await token.shareholders.getShareholders()\n      return {\n        shareholders\n      }\n    }\n    if ( reloadShareholders === true | token !== undefined ) {\n      asyncAction(dispatch, () => fetchShareholders(token), 'Fetching shareholders as well as their token balances')\n    }\n  }, [tokens, reloadShareholders, token, dispatch])\n\n  const records = shareholders.map(({address, balance}) => ({\n    address,\n    balance: balance.toString()\n  }))\n\n  function getData(url, callback) {\n    const reader = new FileReader()\n    reader.addEventListener('load', () => callback(reader.result))\n    reader.readAsText(url)\n  }\n\n  const fileUploadChange = (info) => {\n    if (info.file.status !== 'uploading') {\n      console.log(info.file, info.fileList)\n    }\n    if (info.file.status === 'done') {\n      message.success(`${info.file.name} file uploaded successfully`)\n      getData(info.file.originFileObj, data => {\n        handleImport(data)\n      })\n    } else if (info.file.status === 'error') {\n      message.error(`${info.file.name} file upload failed.`)\n    }\n  }\n\n  const handleImport = (data) => {\n    data = data.split('\\r\\n')\n      .map(record => record.trim())\n      .filter(record => record.length)\n      // Convert string amounts to BigNumber.\n      .map(record => {\n        let [address, amount] = record.split(',')\n        return {address, amount: new BigNumber(amount)}\n      })\n    asyncAction(dispatch, () => mintTokens(data), 'Minting tokens')\n  }\n\n  const mintTokens = async (records) => {\n    const q = await token.shareholders.mintTokens({mintingData: records})\n    await q.run()\n    await new Promise(resolve => setTimeout(resolve, 1000))\n    dispatch({type: 'RELOAD_SHAREHOLDERS'})\n  }\n\n  const exportData = () => {\n    const csvContent = records.map(({address, balance}) => {\n      return [address, balance].join(',')\n    }).join('\\r\\n')\n    console.log('csvContent', csvContent)\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8' })\n    FileSaver.saveAs(blob, 'whitelist.csv')\n  }\n\n  return (\n    <div>\n      <Spin spinning={loading} tip={loadingMessage} size=\"large\">\n        <Layout>\n          <Header style={{\n            backgroundColor: 'white',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'flex-end',\n            alignItems: 'center'\n          }}>\n            <Network networkId={networkId} />\n            <User walletAddress={walletAddress} />\n          </Header>\n          <Layout>\n            <Sider width={350}\n              style={{\n                padding: 50,\n                backgroundColor: '#FAFDFF'\n              }}\n            >\n              { walletAddress && tokens &&\n                <div style={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  width: 250,\n                  justifyContent: 'flex-start'\n                }}>\n                  {tokenSelector({\n                    onTokenSelect: () => dispatch({type: 'TOKEN_SELECTED'})\n                  })}\n                </div>\n              }\n            </Sider>\n            <Content style={{\n              padding: 50,\n              backgroundColor: '#FAFDFF'\n            }}>\n              {error && <Alert\n                message={error}\n                type=\"error\"\n                closable\n                showIcon\n              />}\n              { shareholders.length > 0 &&\n                <Fragment>\n                  <Button style={{marginRight: 20, marginBottom: 20 }} type=\"primary\" onClick={exportData}>Export</Button>\n                  <Upload style={{marginBottom: 20 }} onChange={fileUploadChange}\n                    accept='csv'\n                    showUploadList={false}\n                    name={'file'}\n                    action={'https://www.mocky.io/v2/5cc8019d300000980a055e76'}\n                    headers={{\n                      authorization: 'authorization-text',\n                    }}>\n                    <Button>\n                      <Icon type=\"upload\"/>Import\n                    </Button>\n                  </Upload>\n                  <ShareholdersTable shareholders={records}/>\n                </Fragment>\n              }\n            </Content>\n          </Layout>\n        </Layout>\n      </Spin>\n    </div>\n  )\n}\n\nexport default App\n","import combineReducers from './combineReducers'\nimport { reducer as AppReducer } from './App'\nconst rootReducer = combineReducers({AppReducer})\n\nexport default rootReducer","/**\n * @see https://codesandbox.io/s/rm7587n34m?from-embed\n *\n * A size-optimized refactor of Redux's combineReducers.\n * All safeguards removed. Use at your own risk.\n * https://github.com/reduxjs/redux/blob/master/src/combineReducers.js\n */\n\nconst combineReducers = reducers => (state, action) => {\n  let hasChanged\n  const nextState = Object.keys(reducers).reduce((result, key) => {\n    result[key] = reducers[key](state[key], action)\n    hasChanged = hasChanged || result[key] !== state[key]\n    return result\n  }, {})\n  return hasChanged ? nextState : state\n}\n\nexport default combineReducers\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {createContext, useReducer} from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport rootReducer from './rootReducer'\nimport * as serviceWorker from './serviceWorker'\n\nconst initialState = {\n  AppReducer: {\n    sdk: undefined,\n    loading: false,\n    loadingMessage: '',\n    error: undefined,\n    networkId: -1,\n    walletAddress: '',\n    tokens: [],\n    tokenIndex: undefined,\n    shareholders: [],\n    reloadShareholders: false\n  }\n}\n\nexport const Store = createContext()\nconst WrappedApp = () => {\n  const store = useReducer(rootReducer, initialState)\n  return (<Store.Provider value={store}><App /></Store.Provider>)\n}\n\nexport const _split = (string) => {\n  return string.split(/(?=[A-Z])/).join(' ')\n}\n\nReactDOM.render(<WrappedApp />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}